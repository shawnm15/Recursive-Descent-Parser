program p;
var x, y: integer;
begin
 write(1)
end

program p;
var x, y, z: integer;
begin
 z := 3;
 z := x + y * 7;
 z := 0
end

program p;
  type T = array [3..9] of integer;
  type U = record f: boolean; g: T end;
  var z: T;
  var x: U;
  var y: integer;
  begin
    z[y] := 9
  end

program p;
var x,y,z: integer;
begin x := 5;
  y := 6;
  z := 100;
  x := x + 0; x := 0 + x; x := x * z; x := 1 * x; x := x + 3; x := 3 + x;
  write(x); write(y); write(z); writeln
end


program arithmetic;
var x, y: integer;
procedure QuotRem(x, y: integer);
  var q, r: integer;
  begin q := 0; r := x;
    { q * y + r = x and r >= y }
    while r >= y do
      begin r := r - y; q := q + 1
      end;
    write(q); write(r); writeln
  end;
begin
  read(x); read(y);
  QuotRem(x, y)
end


program p;
  type R = record f, g: boolean end;
  type S = array [1..11] of R;
  type T = array [3..9] of S;
  var x: T;
  var y: integer;
  begin
    x[y][5].g := false;
    x[y][y + 1].f := true
  end

program p;
var x, y, z, q: integer;
procedure function(x, y: integer);
  begin q := 0;
    while q <= 100 do
      begin q := q + 1;
        z := 3;
        z := x + y * 75 - 12;
        if z > 0
        then x := 100
        else x := 50;
        if z < 100
        then z := 46
        else z := 13
      end;
    write(q); writeln
  end;
begin
    if x>0 then write(7) else write(9);
    if z>100 then write(45) else write(0);
  read(x); read(y);
  function(x, y)
end